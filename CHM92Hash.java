package edu.iastate.cs228.hw5;

public class CHM92Hash {
	  /*
	   * To reduce space usage, remove the key list if it is not needed. The
	   * list is not needed for hash table operation. If you hash a value
	   * which is not in the table (which you shouldn't), the only way to
	   * detect the miss is to compare against the corresponding table index.
	   */
	  public static final String[] KEY_LIST = {
	    "January",
	    "February",
	    "March",
	    "April",
	    "May",
	    "June",
	    "July",
	    "August",
	    "September",
	    "October",
	    "November",
	    "December"
	  };

	  private static final int[][] TABLE_1 = {
	    {
	      16, 15, 9, 17, 3, 13, 6, 22,
	      22, 6, 14, 4, 17, 4, 4, 15,
	      11, 13, 6, 7, 12, 4, 0, 3,
	      12, 10, 3, 20, 5, 24, 7, 18,
	      22, 21, 24, 4, 22, 18, 21, 13,
	      9, 19, 3, 6, 22, 5, 11, 18,
	      4, 10, 9, 9, 5, 2, 12, 18,
	      17, 17, 2, 8, 6, 22, 10, 15

	    },
	    {
	      23, 9, 2, 24, 9, 16, 12, 17,
	      19, 15, 20, 24, 16, 23, 2, 1,
	      1, 22, 5, 10, 6, 22, 15, 22,
	      18, 13, 2, 23, 7, 4, 2, 14,
	      20, 16, 13, 13, 8, 6, 24, 20,
	      5, 0, 11, 18, 12, 15, 15, 20,
	      0, 24, 1, 0, 17, 19, 13, 19,
	      19, 21, 24, 2, 23, 17, 6, 5

	    },
	    {
	      13, 12, 13, 23, 20, 2, 23, 5,
	      17, 7, 2, 9, 23, 8, 3, 18,
	      14, 1, 9, 3, 11, 2, 4, 4,
	      20, 5, 21, 8, 18, 2, 6, 13,
	      0, 9, 11, 13, 23, 19, 5, 19,
	      22, 23, 11, 16, 19, 18, 21, 4,
	      15, 12, 3, 8, 6, 4, 3, 23,
	      0, 15, 20, 16, 7, 16, 21, 8

	    },
	    {
	      11, 15, 12, 17, 7, 1, 1, 19,
	      10, 6, 8, 7, 10, 1, 23, 10,
	      17, 8, 15, 2, 21, 21, 11, 4,
	      10, 22, 13, 19, 15, 13, 19, 16,
	      21, 21, 20, 0, 7, 11, 13, 6,
	      4, 10, 0, 4, 17, 8, 19, 19,
	      21, 16, 23, 5, 3, 1, 22, 18,
	      21, 12, 0, 22, 3, 21, 17, 7

	    },
	    {
	      0, 17, 6, 22, 23, 3, 2, 9,
	      19, 9, 18, 9, 23, 17, 8, 21,
	      20, 24, 5, 19, 7, 4, 14, 7,
	      10, 20, 4, 17, 3, 4, 14, 10,
	      23, 15, 21, 10, 7, 17, 17, 13,
	      4, 9, 6, 9, 21, 23, 24, 20,
	      23, 21, 2, 12, 19, 21, 0, 22,
	      19, 8, 20, 24, 15, 3, 1, 12

	    },
	    {
	      1, 17, 3, 1, 20, 20, 11, 15,
	      12, 3, 1, 7, 14, 1, 16, 9,
	      1, 8, 23, 6, 5, 6, 11, 10,
	      12, 16, 19, 23, 4, 11, 10, 11,
	      14, 4, 17, 5, 19, 10, 19, 13,
	      6, 20, 21, 24, 16, 6, 22, 7,
	      1, 10, 18, 24, 3, 24, 13, 6,
	      7, 15, 6, 14, 11, 7, 3, 16

	    },
	    {
	      22, 16, 16, 24, 13, 2, 18, 21,
	      24, 9, 5, 20, 23, 22, 12, 8,
	      6, 14, 17, 8, 9, 4, 13, 13,
	      21, 8, 5, 4, 24, 13, 22, 8,
	      10, 2, 8, 22, 24, 24, 19, 16,
	      8, 22, 22, 12, 11, 12, 22, 16,
	      1, 6, 15, 15, 11, 11, 23, 21,
	      4, 6, 19, 15, 24, 15, 23, 13

	    },
	    {
	      13, 5, 2, 13, 12, 20, 16, 14,
	      18, 8, 1, 17, 16, 13, 4, 21,
	      7, 6, 9, 3, 21, 9, 5, 17,
	      17, 23, 12, 16, 19, 0, 15, 21,
	      3, 19, 24, 22, 0, 11, 5, 21,
	      20, 3, 2, 9, 7, 8, 12, 6,
	      1, 12, 22, 15, 22, 17, 16, 21,
	      15, 23, 14, 17, 1, 16, 21, 12

	    }
	  };

	  private static final int[][] TABLE_2 = {
	    {
	      9, 10, 16, 10, 1, 17, 1, 4,
	      24, 4, 11, 2, 10, 11, 24, 20,
	      3, 10, 5, 6, 10, 19, 6, 11,
	      20, 3, 14, 0, 23, 6, 3, 2,
	      21, 4, 15, 6, 3, 19, 22, 0,
	      17, 11, 8, 22, 9, 10, 24, 22,
	      19, 8, 13, 21, 17, 1, 2, 3,
	      16, 20, 21, 10, 1, 15, 12, 15

	    },
	    {
	      10, 13, 7, 14, 17, 15, 19, 12,
	      7, 23, 15, 3, 20, 24, 23, 17,
	      23, 22, 15, 14, 2, 9, 12, 24,
	      20, 19, 20, 4, 13, 19, 22, 4,
	      17, 21, 20, 14, 0, 19, 6, 16,
	      17, 19, 23, 6, 0, 8, 21, 19,
	      8, 6, 3, 13, 21, 12, 3, 7,
	      8, 10, 8, 14, 8, 0, 0, 13

	    },
	    {
	      11, 1, 9, 13, 18, 13, 10, 3,
	      13, 4, 18, 0, 3, 13, 23, 18,
	      17, 13, 6, 24, 6, 6, 18, 10,
	      21, 3, 20, 2, 11, 8, 22, 20,
	      21, 14, 10, 8, 22, 17, 16, 9,
	      15, 18, 18, 10, 23, 10, 16, 17,
	      15, 20, 17, 6, 23, 7, 17, 7,
	      11, 0, 15, 11, 20, 22, 7, 22

	    },
	    {
	      22, 1, 18, 24, 17, 11, 16, 16,
	      20, 8, 23, 4, 21, 7, 1, 6,
	      21, 24, 14, 24, 0, 3, 21, 9,
	      2, 20, 13, 5, 7, 11, 5, 6,
	      22, 5, 8, 21, 8, 13, 23, 14,
	      22, 14, 15, 16, 15, 22, 0, 4,
	      4, 24, 10, 6, 21, 22, 15, 18,
	      17, 24, 14, 19, 17, 23, 6, 5

	    },
	    {
	      13, 14, 18, 7, 22, 0, 7, 22,
	      16, 7, 5, 12, 1, 13, 10, 17,
	      23, 14, 13, 23, 4, 21, 17, 6,
	      13, 1, 19, 0, 6, 20, 10, 1,
	      18, 1, 11, 23, 8, 17, 16, 9,
	      21, 23, 23, 2, 24, 9, 6, 18,
	      19, 21, 15, 11, 22, 17, 18, 1,
	      13, 7, 13, 21, 0, 15, 23, 22

	    },
	    {
	      8, 21, 1, 22, 5, 2, 11, 7,
	      7, 13, 4, 0, 1, 10, 1, 13,
	      24, 13, 23, 14, 5, 2, 7, 2,
	      5, 12, 13, 22, 14, 5, 16, 4,
	      4, 13, 12, 21, 1, 15, 5, 7,
	      15, 22, 0, 19, 2, 8, 19, 12,
	      6, 9, 13, 18, 4, 14, 18, 14,
	      7, 13, 5, 0, 11, 7, 15, 11

	    },
	    {
	      2, 0, 12, 13, 12, 0, 8, 6,
	      16, 7, 6, 22, 20, 21, 13, 4,
	      14, 6, 21, 6, 3, 8, 3, 16,
	      18, 21, 12, 6, 17, 0, 18, 19,
	      9, 1, 20, 24, 12, 11, 9, 13,
	      23, 2, 3, 7, 20, 10, 2, 5,
	      8, 24, 6, 7, 4, 24, 21, 10,
	      0, 11, 7, 15, 18, 8, 20, 9

	    },
	    {
	      19, 17, 3, 12, 10, 18, 0, 10,
	      6, 2, 19, 21, 16, 7, 21, 19,
	      6, 13, 12, 6, 9, 15, 14, 23,
	      7, 4, 17, 22, 10, 10, 9, 5,
	      14, 1, 24, 1, 13, 3, 6, 4,
	      1, 3, 12, 18, 20, 21, 12, 20,
	      7, 14, 9, 23, 12, 11, 0, 6,
	      19, 10, 19, 14, 2, 24, 4, 19

	    }
	  };

	  private static final int[] G = {
	    0, 0, 0, 0, 0, 0, 0, 11,
	    0, 0, 5, 1, 0, 0, 8, 5,
	    2, 0, 7, 0, 10, 0, 9, 1,
	    2
	  };

	  /**
	   * Determines the hash code of the given string, which is equal to its
	   * index in the key list.
	   * Precondition: the given string is within the key list.
	   * 
	   * @param key
	   *   the string for which to calculate a hash
	   * @return
	   *   the hash code of the given string
	   */
	  public static int hash(String key) {
	    int i, u, v;

	    for (u = v = i = 0; i < key.length(); ++i) {
	      u = (u + TABLE_1[i % 8][key.charAt(i) % 64])
	            % 25;
	      v = ((v + TABLE_2[i % 8][key.charAt(i) % 64])
	            % 25);
	    }

	    return (G[u] + G[v]) % 12;
	  }

	  /*
	   * Example main method to test the hash function. Every key should hash
	   * to its own index. An error message will be printed if this doesn't
	   * hold.
	   * 
	   * Uncomment to use.
	   */
	  public static void main(String[] args) {
	    for (int i = 0; i < KEY_LIST.length; ++i) {
	      int h = hash(KEY_LIST[i]);
	      if (h != i) {
	        System.err.printf("Error while hashing \"%s\": expected %d but was %d%n", KEY_LIST[i], i, h);
	      }
	    }
	  }
	 
	}